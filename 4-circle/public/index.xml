<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4Circle</title>
    <link>https://olincollege.github.io/pie-2022-03/4-circle/public/</link>
    <description>Recent content on 4Circle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Dec 2022 01:00:56 -0500</lastBuildDate><atom:link href="https://olincollege.github.io/pie-2022-03/4-circle/public/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Design</title>
      <link>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/software/</link>
      <pubDate>Fri, 16 Dec 2022 00:39:49 -0500</pubDate>
      
      <guid>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/software/</guid>
      <description>Overview and Goals The primary software component of our project was an algorithm that could play the Connect 4 algorithm against our human player.
We wanted to make our algorithm as good at the game as possible, so we set our goal to build a perfect weak solver; that is, a solver that was capable of ensuring the best possible result from any situation, though not necessarily taking the shortest path to get there.</description>
    </item>
    
    <item>
      <title>Mechanical Design</title>
      <link>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/mechanical/</link>
      <pubDate>Fri, 16 Dec 2022 01:00:51 -0500</pubDate>
      
      <guid>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/mechanical/</guid>
      <description>For our mechanical system, we created a chip dispensing mechanism that was mounted on a lead screw attached to a stepper motor so that it could move to the correct column and dispense a chip into it. Almost all parts were 3D printed using PLA with the exception of the mount and box around the lead screw, which was laser cut on 1/4&amp;quot; MDF.
Chip Dispensing: To hold the chips prior to their dispensing, we 3-D printed a PLA tube that was mounted above the chute.</description>
    </item>
    
    <item>
      <title>Firmware Design</title>
      <link>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/firmware/</link>
      <pubDate>Fri, 16 Dec 2022 00:39:49 -0500</pubDate>
      
      <guid>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/firmware/</guid>
      <description>The primary software component of our algorithm was written in Go and our electrical components was written in the Arduino IDE language.
To integrate our software and electrical components we used a simple Python script that could write to the serial port the arduino was connected to. To do this, we first needed to integrate Go and Python, such that our compiled Go program could call our Python program to write to serial.</description>
    </item>
    
    <item>
      <title>BOM and Cost Analysis</title>
      <link>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/bom/</link>
      <pubDate>Fri, 16 Dec 2022 00:39:49 -0500</pubDate>
      
      <guid>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/bom/</guid>
      <description>Item Price per unit Quantity Total Cost Connect 4 Game $9.88 1 $9.88 Stepper Motor1 $15 1 $15 Stepper Motor Driver1 $10 1 $10 Raspberry Pi1 $35 1 $35 Lead Screw1 $10 1 $10 360 degree Servo $15.99 1 $15.99 1/4 in. MDF $12.50 2 $25 PLA Filament1 $25 0.26 $6.50 USB Number Pad1 $12 1 $12 Total Cost: $139.37 Item was acquired for free/discount or already owned and estimated cost has been provided&amp;#160;&amp;#x21a9;&amp;#xfe0e;&amp;#160;&amp;#x21a9;&amp;#xfe0e;&amp;#160;&amp;#x21a9;&amp;#xfe0e;&amp;#160;&amp;#x21a9;&amp;#xfe0e;&amp;#160;&amp;#x21a9;&amp;#xfe0e;&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>High Level Overview</title>
      <link>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/highlevel/</link>
      <pubDate>Fri, 16 Dec 2022 00:39:49 -0500</pubDate>
      
      <guid>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/highlevel/</guid>
      <description>For our PIE final project, we created a robot that can play Connect 4 against a human player. To compute the moves, the computer player used a NegaMax algorithm to find the column to play in that provided the best possible score, then sent that column to the arduino which activated the lead screw and moved our chip dispenser to the correct column and dispensed a chip. We wrote the NegaMax algorithm in Go, used Python to communicate between Go and Arduino, and used the Arduino IDE to control the arduino.</description>
    </item>
    
    <item>
      <title>Gallery</title>
      <link>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/gallery/</link>
      <pubDate>Fri, 16 Dec 2022 00:39:49 -0500</pubDate>
      
      <guid>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/gallery/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Electrical Design</title>
      <link>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/electrical/</link>
      <pubDate>Fri, 16 Dec 2022 01:00:56 -0500</pubDate>
      
      <guid>https://olincollege.github.io/pie-2022-03/4-circle/public/docs/electrical/</guid>
      <description>Breakdown Our electrical system consisted of:
A4988 Stepper motor driver Stepper motor 360 degree rotating servo 12V AC/DC converter Raspberry Pi Arduino Uno 50 micro Farad Capacitor Multiple Processing Units We chose to work with both an arduino and a raspberry pi to allow us to have two different opperation systems. Since our main algorithm was written on Go we figured that it would be best to run it on an a raspberry pi.</description>
    </item>
    
  </channel>
</rss>
